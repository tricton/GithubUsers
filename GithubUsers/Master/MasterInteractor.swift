//
//  MasterInteractor.swift
//  GithubUsers
//
//  Created by Nik Cane on 07/09/16.
//  Copyright (c) 2016 Nik Cane. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol MasterInteractorOutput
{
  func prepareUsers()
  func showUsersLoadAlert()
}

class MasterInteractor
{
//  MARK: request variables
  private let operationQueue = NSOperationQueue()
  private var currentUserId = -1
  
//  MARK: architecture template presenter
  var output: MasterInteractorOutput?
//  Output properties
  var users = [UserModel]()
}

// MARK: Download logic

extension MasterInteractor: MasterViewControllerOutput
{
  func requestUsers()
  {
    let userRequestModel = UsersRequest(startsWith: currentUserId, completion: userLoadCompletion)
    let userRequestWorker = MasterWorker(request: userRequestModel)
    operationQueue.addOperation(userRequestWorker)
    UIApplication.sharedApplication().networkActivityIndicatorVisible = true
  }
  
  private func userLoadCompletion(users: [UserModel]?)
  {
    UIApplication.sharedApplication().networkActivityIndicatorVisible = false
    if let users = users {
      handleUserResponse(users)
      output?.prepareUsers()
    }
    else {
      output?.showUsersLoadAlert()
    }
  }
  
  private func handleUserResponse(users: [UserModel])
  {
    // maybe is not so god for big arrays but OK for 100 users 
    self.users.insertContentsOf( users.sort({$0.id > $1.id}), at: 0)
    if let id = self.users.first?.id {
      currentUserId = id
    }
  }
}

extension MasterInteractor: DetailViewControllerOutput
{
  func requestFollowers(currentUser: UserModel?)
  {
    guard let currentUser = currentUser else { return }
    let followersRequest = FollowersRequest(urlStr: currentUser.followersUrl, completion: userLoadCompletion)
    let followersRequestWorker = FollowersWorker(request: followersRequest)
    operationQueue.addOperation(followersRequestWorker)
  }
}

